#!/data/data/com.termux/files/usr/bin/bash
# Advanced Smart File Manager with Destination Selection for Copy

handle_file() {
    local file="$1"
    while true; do
        echo
        echo "üìÑ File selected: $(basename "$file")"
        echo "What would you like to do with the file?"
        echo "1) View"
        echo "2) Edit"
        echo "3) Copy Content"
        echo "4) Delete Content"
        echo "5) Erase Content"
        echo "6) Replace With Clipboard Content"
        echo "7) Share"
        echo "8) Back to Previous Menu"
        echo "9) Back to Home/exit"
        echo "0) Rename"
        read -p "Enter choice [1-9]: " action

        case "$action" in
            1)
                termux-open "$file"
                return 1
                ;;
            2)
                nano "$file"
                return 1
                ;;
            3)
                copy "$file"
                return 1
                ;;
            4)
                delete "$file"
                return 1
                ;;
            5)
                erase "$file"
                return 1
                ;;
            6)
                overwrite "$file"
                return 1
                ;;
            7)
                termux-share "$file"
                return 1
                ;;
            8)
                return 1
                ;;
            9)
                exit 0
                ;;
            0)
                rename_item "$file"
                return 1
                ;;
            *)
                echo "‚ùå Invalid option. Try again."
                ;;
        esac
    done
}

rename_item() {
    local target="$1"
    local dir newname

    if [ -d "$target" ]; then
        dir=$(dirname -- "$target")
        read -p "Enter new folder name for '$(basename "$target")': " newname
        mv -v "$target" "$dir/$newname"
    elif [ -f "$target" ]; then
        dir=$(dirname -- "$target")
        read -p "Enter new file name for '$(basename "$target")': " newname
        mv -v "$target" "$dir/$newname"
    else
        echo "‚ùå Cannot rename: '$target' not found." >&2
        return 1
    fi
}

get_abs_path() {
    local target="$1"
    if [ -d "$target" ]; then
        cd -- "$target" && pwd
    elif [ -f "$target" ]; then
        local dir=$(dirname -- "$target")
        local base=$(basename -- "$target")
        echo "$(cd -- "$dir" && pwd)/$base"
    else
        echo "Error: '$target' does not exist" >&2
        return 1
    fi
}

create_files() {
    read -p "Enter filenames (separated by |): " filelist
    IFS='|' read -ra files <<< "$filelist"
    for file in "${files[@]}"; do
        touch "$path/$file"
        echo "‚úÖ Created file: $file"
    done
}

create_dirs() {
    read -p "Enter folder names (separated by |): " dirlist
    IFS='|' read -ra dirs <<< "$dirlist"
    for dir in "${dirs[@]}"; do
        mkdir -p "$path/$dir"
        echo "‚úÖ Created folder: $dir"
    done
}

move_items() {
    # Select items to move
    echo "Select items to move (enter numbers separated by ,)"
    read -p "Item numbers: " itemlist
    IFS=',' read -ra indices <<< "$itemlist"
    
    # Collect selected items
    selected_items=()
    for index in "${indices[@]}"; do
        if [[ $index =~ ^[0-9]+$ ]] && [ $index -ge 1 ] && [ $index -le ${#items[@]} ]; then
            selected_items+=("${items[$((index-1))]}")
        else
            echo "‚ùå Skipping invalid index: $index"
        fi
    done

    if [ ${#selected_items[@]} -eq 0 ]; then
        echo "‚ùå No valid items selected"
        return
    fi

    # Show selected items
    echo
    echo "üì¶ Selected items:"
    for item in "${selected_items[@]}"; do
        echo "- $(basename "$item")"
    done
    
    # Save current path for destination selection
    original_path="$path"
    path="$HOME"
    move_mode=true
    echo
    echo "üåç Navigate to destination folder (select folder or use commands)"
    echo "Press 'c' at destination to confirm move"
    echo "Press 'b' to cancel move operation"
}

delete_items() {
    echo "Select items to delete (enter numbers separated by ,)"
    read -p "Item numbers: " itemlist
    IFS=',' read -ra indices <<< "$itemlist"
    
    # Collect selected items
    selected_items=()
    for index in "${indices[@]}"; do
        if [[ $index =~ ^[0-9]+$ ]] && [ $index -ge 1 ] && [ $index -le ${#items[@]} ]; then
            selected_items+=("${items[$((index-1))]}")
        else
            echo "‚ùå Skipping invalid index: $index"
        fi
    done

    if [ ${#selected_items[@]} -eq 0 ]; then
        echo "‚ùå No valid items selected"
        return
    fi

    # Show warning
    echo
    echo "‚ö†Ô∏è WARNING: You are about to delete the following items:"
    for item in "${selected_items[@]}"; do
        echo "- $(basename "$item")"
    done
    
    read -p "Are you sure? This cannot be undone. (y/n): " confirm
    if [[ $confirm != "y" && $confirm != "Y" ]]; then
        echo "üö´ Deletion cancelled"
        return
    fi

    # Perform deletion
    for item in "${selected_items[@]}"; do
        if [ -e "$item" ]; then
            rm -rf -- "$item"
            echo "üóëÔ∏è Deleted: $(basename "$item")"
        else
            echo "‚ùå Item not found: $(basename "$item")"
        fi
    done
}

initiate_copy() {
    echo "Select items to copy (enter numbers separated by ,)"
    read -p "Item numbers: " itemlist
    IFS=',' read -ra indices <<< "$itemlist"
    
    # Collect selected items
    selected_items=()
    for index in "${indices[@]}"; do
        if [[ $index =~ ^[0-9]+$ ]] && [ $index -ge 1 ] && [ $index -le ${#items[@]} ]; then
            selected_items+=("${items[$((index-1))]}")
        else
            echo "‚ùå Skipping invalid index: $index"
        fi
    done

    if [ ${#selected_items[@]} -eq 0 ]; then
        echo "‚ùå No valid items selected"
        return
    fi

    # Show selected items
    echo
    echo "üì¶ Selected items to copy:"
    for item in "${selected_items[@]}"; do
        echo "- $(basename "$item")"
    done
    
    # Save current path for destination selection
    original_path="$path"
    path="$HOME"
    copy_mode=true
    echo
    echo "üìã COPY MODE: Navigate to destination folder"
    echo "Press 'c' at destination to confirm copy"
    echo "Press 'b' to cancel copy operation"
}

perform_copy() {
    for item in "${selected_items[@]}"; do
        if [ ! -e "$item" ]; then
            echo "‚ùå Item not found: $(basename "$item")"
            continue
        fi
        
        base=$(basename -- "$item")
        name="${base%.*}"
        ext="${base##*.}"
        
        # Handle files with no extension
        if [[ "$base" == "$ext" ]]; then
            name="$base"
            ext=""
        fi
        
        count=1
        newbase="$base"
        
        # Generate unique name in destination directory
        while [ -e "$path/$newbase" ]; do
            if [ -n "$ext" ]; then
                newbase="${name}_${count}.${ext}"
            else
                newbase="${name}_${count}"
            fi
            count=$((count+1))
        done
        
        # Perform copy to destination
        cp -r -- "$item" "$path/$newbase"
        echo "üìã Copied: $(basename "$item") ‚Üí $newbase"
    done
}

# Initialize global variables
path=$(pwd)
move_mode=false
copy_mode=false
selected_items=()
original_path=""

# Handle command-line arguments
if [ $# -eq 1 ]; then
    target="$1"
    
    if [ -d "$target" ]; then
        path=$(get_abs_path "$target")
    elif [ -f "$target" ]; then
        selected=$(get_abs_path "$target")
        handle_file "$selected"
        exit $?
    else
        echo "Error: '$target' not found" >&2
        exit 1
    fi
fi

shopt -s nullglob
while true; do
    echo
    if $move_mode; then
        echo "üöö MOVE MODE: Select destination folder"
    elif $copy_mode; then
        echo "üìã COPY MODE: Select destination folder"
    else
        echo "üìÇ Location: $path"
    fi
    
    items=("$path"/*)
    
    if [ ${#items[@]} -eq 0 ]; then
        echo "üõë This directory is empty"
    else
        idx=1
        for item in "${items[@]}"; do
            if [ -d "$item" ]; then
                icon="üìÅ"
            else
                icon="üìÑ"
            fi
            printf "%2d) %s %s\n" "$idx" "$icon" "$(basename "$item")"
            idx=$((idx+1))
        done
    fi

    echo
    if $move_mode; then
        echo "c) Confirm   b) Cancel"
    elif $copy_mode; then
        echo "c) Confirm   b) Cancel"
    else
        echo "n) New folder    f) New file    u) Up directory cd) change directory"
        echo "m) Move items    d) Delete items    p) Copy items    r) Rename   q/h) Quit/Home"
    fi
    
    read -p "Select item number or command: " choice

    # Handle move mode commands
    if $move_mode; then
        case "$choice" in
            c|C)
                # Perform the move operation
                for item in "${selected_items[@]}"; do
                    mv -v "$item" "$path/"
                done
                echo "‚úÖ Items moved successfully"
                
                # Return to original location
                move_mode=false
                path="$original_path"
                selected_items=()
                continue
                ;;
            b|B)
                echo "üö´ Move operation cancelled"
                move_mode=false
                path="$original_path"
                selected_items=()
                continue
                ;;
        esac
    fi

    # Handle copy mode commands
    if $copy_mode; then
        case "$choice" in
            c|C)
                # Perform the copy operation
                perform_copy
                echo "‚úÖ Items copied successfully"
                
                # Return to original location
                copy_mode=false
                path="$original_path"
                selected_items=()
                continue
                ;;
            b|B)
                echo "üö´ Copy operation cancelled"
                copy_mode=false
                path="$original_path"
                selected_items=()
                continue
                ;;
        esac
    fi

    # Handle normal mode commands
    case "$choice" in
        q|Q|h|H)
            exit 0
            ;;
        u|U)
            [ "$path" != "/" ] && path=$(dirname "$path")
            continue
            ;;
        n|N)
            create_dirs
            continue
            ;;
        f|F)
            create_files
            continue
            ;;
        m|M)
            if [ ${#items[@]} -eq 0 ]; then
                echo "‚ùå No items to move"
            else
                move_items
            fi
            continue
            ;;
        d|D)
            if [ ${#items[@]} -eq 0 ]; then
                echo "‚ùå No items to delete"
            else
                delete_items
            fi
            continue
            ;;
        p|P)
            if [ ${#items[@]} -eq 0 ]; then
                echo "‚ùå No items to copy"
            else
                initiate_copy
            fi
            continue
            ;;
        r|R)
            if [ -n "$selected" ]; then
                rename_item "$selected"
            else
                rename_item "$path"
            fi
            continue
            ;;
        cd|CD|cD|Cd)
           if ! cd "$path"; then
               echo "‚ùå Could not cd into $path"
            continue
            fi
               exec "$SHELL"
            ;;
    esac

    # Handle numeric selection
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#items[@]}" ]; then
        echo "‚ö†Ô∏è  Invalid selection" >&2
        continue
    fi

    selected="${items[$((choice-1))]}"

    if [ -d "$selected" ]; then
        path="$selected"
    elif [ -f "$selected" ]; then
        if $move_mode || $copy_mode; then
            echo "‚ö†Ô∏è  Please select a folder for destination"
        else
            handle_file "$selected"
        fi
    else
        echo "‚ùì Unsupported item type" >&2
    fi
done
