#!/data/data/com.termux/files/usr/bin/bash
# file: ~/bin/open
# Interactive navigator + action dispatcher
#   ‚Ä¢ Navigate folders by index
#   ‚Ä¢ On files, choose to open/edit, or apply commands by index:
#       copy N, erase N, delete N, etc.
#   ‚Ä¢ Loop until user types 'exit' or Ctrl-C.

# List of ‚Äúactions‚Äù you want to support by name:
#   (they must already exist as functions or aliases in your shell)
ACTIONS=( copy erase delete overwrite )  

# Start in current directory
cwd="$PWD"

while true; do
  echo
  echo "üìÇ Current directory: $cwd"
  items=()
  i=1
  for it in "$cwd"/*; do
    items+=( "$it" )
    printf "%2d) %s\n" "$i" "${it##*/}"
    i=$((i+1))
  done

  echo
  read -p "Enter index OR '<action> <index>' (or 'exit'): " cmd arg

  # Exit?
  [[ "$cmd" == "exit" ]] && break

  # If just a number ‚Üí treat as ‚Äúopen‚Äù:
  if [[ -z "$arg" ]] && [[ "$cmd" =~ ^[0-9]+$ ]]; then
    idx=$cmd
    # validate
    if (( idx<1 || idx>${#items[@]} )); then
      echo "‚ùå Invalid index."
      continue
    fi
    sel="${items[$((idx-1))]}"

    if [ -d "$sel" ]; then
      # descend into folder
      cwd="$sel"
      continue
    elif [ -f "$sel" ]; then
      # file: choose open or edit
      echo
      echo "üìÑ File: ${sel##*/}"
      echo " 1) Open with external app"
      echo " 2) Edit in nano"
      read -p "Choose 1 or 2: " choice
      if [ "$choice" = "1" ]; then
        termux-open "$sel"
      else
        nano "$sel"
      fi
      # after file action, stay in same folder
      continue
    else
      echo "‚ùì Not a file or folder."
      continue
    fi
  fi

  # If action + index
  if [[ " ${ACTIONS[*]} " =~ " $cmd " ]] && [[ "$arg" =~ ^[0-9]+$ ]]; then
    idx=$arg
    if (( idx<1 || idx>${#items[@]} )); then
      echo "‚ùå Invalid index."
      continue
    fi
    sel="${items[$((idx-1))]}"
    # Dispatch
    echo "üîß Running '$cmd' on '${sel##*/}'"
    $cmd "$sel"
    continue
  fi

  echo "‚ùå Unrecognized input. Try again."
done
