#!/data/data/com.termux/files/usr/bin/bash
# Advanced Smart File Manager with Enhanced Move Functionality

handle_file() {
    local file="$1"
    while true; do
        echo
        echo "📄 File selected: $(basename "$file")"
        echo "What would you like to do with the file?"
        echo "1) Open using external tool (termux-open)"
        echo "2) Edit using nano"
        echo "3) Delete file"
        echo "4) Back to browser"
        read -p "Enter choice [1-4]: " action

        case "$action" in
            1)
                termux-open "$file"
                ;;
            2)
                nano "$file"
                ;;
            3)
                if rm -i "$file"; then
                    echo "✅ File deleted"
                    return 1
                fi
                ;;
            4)
                return 1
                ;;
            *)
                echo "❌ Invalid option. Try again."
                ;;
        esac
    done
}

get_abs_path() {
    local target="$1"
    if [ -d "$target" ]; then
        cd -- "$target" && pwd
    elif [ -f "$target" ]; then
        local dir=$(dirname -- "$target")
        local base=$(basename -- "$target")
        echo "$(cd -- "$dir" && pwd)/$base"
    else
        echo "Error: '$target' does not exist" >&2
        return 1
    fi
}

create_files() {
    read -p "Enter filenames (separated by |): " filelist
    IFS='|' read -ra files <<< "$filelist"
    for file in "${files[@]}"; do
        touch "$path/$file"
        echo "✅ Created file: $file"
    done
}

create_dirs() {
    read -p "Enter folder names (separated by |): " dirlist
    IFS='|' read -ra dirs <<< "$dirlist"
    for dir in "${dirs[@]}"; do
        mkdir -p "$path/$dir"
        echo "✅ Created folder: $dir"
    done
}

browse_destination() {
    local current="$1"
    local original="$current"
    
    while true; do
        echo
        echo "📂 Select destination: $current"
        local dest_items=("$current"/*)
        local dest_idx=1
        
        # Always show parent directory option
        if [ "$current" != "/" ]; then
            echo " 0) .. (parent directory)"
        fi
        
        # List directories only
        for item in "${dest_items[@]}"; do
            if [ -d "$item" ]; then
                printf "%2d) 📁 %s\n" "$dest_idx" "$(basename "$item")"
                dest_idx=$((dest_idx+1))
            fi
        done

        echo
        echo "Options:"
        echo "  c) Confirm this destination"
        echo "  m) Enter manual path"
        echo "  b) Back to move operation"
        read -p "Select folder number or option: " dest_choice

        case "$dest_choice" in
            0)
                if [ "$current" != "/" ]; then
                    current=$(dirname "$current")
                else
                    echo "❌ Already at root directory"
                fi
                ;;
            c|C)
                echo "$current"
                return 0
                ;;
            m|M)
                read -p "Enter destination path: " man_path
                if [ -d "$man_path" ]; then
                    current=$(realpath "$man_path")
                else
                    echo "❌ Invalid path or not a directory"
                fi
                ;;
            b|B)
                echo "$original"
                return 1
                ;;
            *)
                if [[ "$dest_choice" =~ ^[0-9]+$ ]]; then
                    local dir_idx=$((dest_choice-1))
                    if [ "$dir_idx" -ge 0 ] && [ "$dir_idx" -lt "${#dest_items[@]}" ]; then
                        local selected="${dest_items[$dir_idx]}"
                        if [ -d "$selected" ]; then
                            current="$selected"
                        else
                            echo "❌ Not a directory"
                        fi
                    else
                        echo "❌ Invalid selection"
                    fi
                else
                    echo "❌ Invalid option"
                fi
                ;;
        esac
    done
}

move_items() {
    echo "Select items to move (enter numbers separated by |)"
    read -p "Item numbers: " itemlist
    IFS='|' read -ra indices <<< "$itemlist"
    
    # Collect selected items
    local selected_items=()
    for index in "${indices[@]}"; do
        if [[ $index =~ ^[0-9]+$ ]] && [ $index -ge 1 ] && [ $index -le ${#items[@]} ]; then
            selected_items+=("${items[$((index-1))]}")
        else
            echo "❌ Skipping invalid index: $index"
        fi
    done

    if [ ${#selected_items[@]} -eq 0 ]; then
        echo "❌ No valid items selected"
        return
    fi

    # Browse for destination
    local dest=$(browse_destination "$HOME")
    if [ $? -ne 0 ] || [ -z "$dest" ]; then
        echo "ℹ️ Move operation cancelled"
        return
    fi

    # Move selected items
    for item in "${selected_items[@]}"; do
        mv -v "$item" "$dest/"
    done
}

# Handle command-line arguments
if [ $# -eq 1 ]; then
    target="$1"
    
    if [ -d "$target" ]; then
        path=$(get_abs_path "$target")
    elif [ -f "$target" ]; then
        selected=$(get_abs_path "$target")
        handle_file "$selected"
        exit $?
    else
        echo "Error: '$target' not found" >&2
        exit 1
    fi
else
    path=$(pwd)
fi

shopt -s nullglob
while true; do
    echo
    echo "📂 Location: $path"
    items=("$path"/*)
    
    if [ ${#items[@]} -eq 0 ]; then
        echo "🛑 This directory is empty"
    else
        idx=1
        for item in "${items[@]}"; do
            if [ -d "$item" ]; then
                icon="📁"
            else
                icon="📄"
            fi
            printf "%2d) %s %s\n" "$idx" "$icon" "$(basename "$item")"
            idx=$((idx+1))
        done
    fi

    echo
    echo "n) New folder    f) New file    u) Up directory"
    echo "c) CD to here    m) Move items  q) Quit"
    read -p "Select item number or command: " choice

    # Handle commands
    case "$choice" in
        q|Q)
            exit 0
            ;;
        u|U)
            [ "$path" != "/" ] && path=$(dirname "$path")
            continue
            ;;
        n|N)
            create_dirs
            continue
            ;;
        f|F)
            create_files
            continue
            ;;
        c|C)
            echo
            echo "📌 To run commands in this directory:"
            echo "cd '$path'"
            echo
            echo "Press Enter to copy this command to clipboard"
            read -p "or any other key to continue..." -n 1 -s key
            if [ -z "$key" ]; then
                echo "cd '$path'" | termux-clipboard-set
                echo "✅ Command copied to clipboard!"
            fi
            continue
            ;;
        m|M)
            if [ ${#items[@]} -eq 0 ]; then
                echo "❌ No items to move"
            else
                move_items
            fi
            continue
            ;;
    esac

    # Handle numeric selection
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#items[@]}" ]; then
        echo "⚠️  Invalid selection" >&2
        continue
    fi

    selected="${items[$((choice-1))]}"

    if [ -d "$selected" ]; then
        path="$selected"
    elif [ -f "$selected" ]; then
        handle_file "$selected"
    else
        echo "❓ Unsupported item type" >&2
    fi
done
